<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cqut.czb.bn.dao.mapper.autoRecharge.UserRechargeMapper" >
    <select id="getBalance" resultType="java.lang.Double" parameterType="java.lang.String" >
        select offline_recharge_balance from czb_user_income_info where user_id = #{userId,jdbcType=VARCHAR}
        GROUP BY offline_recharge_balance
    </select>

    <select id="getTotalRechargeAmount" resultType="java.lang.Double" parameterType="java.lang.String" >
       SELECT sum(turnover_amount) as total
       FROM czb_petrol_sales_records
       where buyer_id = #{userId,jdbcType=VARCHAR} and record_type = 3
    </select>

    <select id="getRechargeDetails" parameterType="com.cqut.czb.bn.entity.dto.autoRecharge.UserRechargeDTO" resultType="com.cqut.czb.bn.entity.dto.OfflineRecharge.UserRecharge">
        SELECT
        petrol_id as petrolId,
        petrol_num as petrolNum,
        turnover_amount as turnoverAmount,
        state,
        is_recharged as isRecharged,
        transaction_time as transactionTime,
        create_at as createAt,
        update_at as updateAt
        FROM czb_petrol_sales_records
        <where>
            buyer_id = #{buyerId,jdbcType=VARCHAR}
              and record_type = 3
            <if test="petrolNum != null and petrolNum != ''">
              and   petrol_num like concat('%', #{petrolNum},'%')
            </if>
            <if test="isRecharged != null and isRecharged != -1" >
                and   is_recharged = #{isRecharged,jdbcType=INTEGER}
            </if>
        </where>
        ORDER BY transaction_time DESC

    </select>

    <insert id="insertRecharge" parameterType="com.cqut.czb.bn.entity.dto.OfflineRecharge.UserRecharge" >
        insert into czb_petrol_sales_records (record_id, petrol_num, buyer_id,
          payment_method, third_order_id, turnover_amount,
          transaction_time, petrol_id, state,
          contract_id, create_at, update_at,
          record_type, is_recharged, petrol_kind,denomination,current_price)
        values (#{recordId,jdbcType=VARCHAR}, #{petrolNum,jdbcType=VARCHAR}, #{buyerId,jdbcType=VARCHAR},
          #{paymentMethod,jdbcType=INTEGER}, #{thirdOrderId,jdbcType=VARCHAR}, #{turnoverAmount,jdbcType=DOUBLE},
          now(), #{petrolId,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER},
          #{contractId,jdbcType=VARCHAR}, now(), now(),
          #{recordType,jdbcType=INTEGER}, #{isRecharged,jdbcType=INTEGER}, #{petrolKind,jdbcType=INTEGER},
          #{denomination,jdbcType=DOUBLE}, #{currentPrice,jdbcType=DOUBLE})
    </insert>
    <insert id="insertBatchRecharge" parameterType="com.cqut.czb.bn.entity.dto.autoRecharge.UserRechargeDTO" >
        insert into czb_petrol_sales_records (record_id, petrol_num, buyer_id,
          payment_method, third_order_id, turnover_amount,
          transaction_time, petrol_id, state,
          contract_id, create_at, update_at,
          record_type, is_recharged, petrol_kind,denomination,current_price)
        values
        <foreach  collection="petrolNums" item="item" index="index" open="(" separator="," close=")">
            (#{recordId,jdbcType=VARCHAR},
            #{item,jdbcType=VARCHAR},
            #{buyerId,jdbcType=VARCHAR},
            #{paymentMethod,jdbcType=INTEGER},
            #{thirdOrderId,jdbcType=VARCHAR},
            #{turnoverAmount,jdbcType=DOUBLE},now(),
            #{petrolId,jdbcType=VARCHAR},
            #{state,jdbcType=INTEGER},
            #{contractId,jdbcType=VARCHAR}, now(), now(),
            #{recordType,jdbcType=INTEGER},
            #{isRecharged,jdbcType=INTEGER},
            #{petrolKind,jdbcType=INTEGER},
            #{denomination,jdbcType=DOUBLE},
            #{currentPrice,jdbcType=DOUBLE})
        </foreach>
    </insert>

    <insert id="insert" parameterType="com.cqut.czb.bn.entity.dto.OfflineRecharge.IncomeInfo" >
        insert into czb_user_income_info (
        info_id,
        user_id,
        fanyong_income,
        share_income,
        pay_total_rent,
        got_total_rent,
        other_income,
        create_at,
        update_at,
        withdrawed,
        total_consumption,
        offline_recharge_balance)
        values (
                #{infoId,jdbcType=VARCHAR},
                #{userId,jdbcType=VARCHAR},
                '0.00',
                '0.00',
                '0.00',
                '0.00',
                '0.00',
                CURRENT_TIMESTAMP ,
                CURRENT_TIMESTAMP,
                '0.00',
                '0.00',
                #{offlineRechargeBalance,jdbcType=DOUBLE}
        )
    </insert>

    <update id="updateRecharge" >
        update czb_user_income_info
        <set >
            <if test="turnoverAmount != null and turnoverAmount != ''">
                offline_recharge_balance = offline_recharge_balance - #{turnoverAmount,jdbcType=DOUBLE}
            </if>
        </set>
        where user_id = #{userId,jdbcType=VARCHAR}
    </update>

    <update id="update" >
        update czb_user_income_info
        <set >
            <if test="turnoverAmount != null and turnoverAmount != ''">
                other_income = other_income + #{turnoverAmount,jdbcType=DOUBLE}
            </if>
        </set>
        where user_id in ( SELECT owner_id FROM czb_petrol WHERE petrol_num =  #{petrolNum,jdbcType=VARCHAR})
    </update>

</mapper>