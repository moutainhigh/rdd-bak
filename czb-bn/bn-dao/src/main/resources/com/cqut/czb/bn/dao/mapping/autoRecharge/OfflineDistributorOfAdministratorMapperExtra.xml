<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cqut.czb.bn.dao.mapper.autoRecharge.OfflineDistributorOfAdministratorMapperExtra">
<!--    <resultMap id="BaseResultMap" type="com.cqut.czb.bn.entity.dto.OfflineClientDTO" >-->
<!--        <id column="user_account" property="account" jdbcType="VARCHAR" />-->
<!--        <result column="offline_recharge_balance" property="balance" jdbcType="Double" />-->
<!--        <result column="total_consumption" property="totalConsumption" jdbcType="Double" />-->
<!--        <result column="total_recharge" property="totalRecharge" jdbcType="Double" />-->
<!--        <result column="total_turn" property="totalTurn" jdbcType="Double" />-->
<!--        <result column="create_at" property="createAt" jdbcType="TIMESTAMP" />-->
<!--    </resultMap>-->

<select id="getRechargeTableList" parameterType="com.cqut.czb.bn.entity.dto.AccountRechargeDTO" resultType="com.cqut.czb.bn.entity.dto.AccountRechargeDTO">
    SELECT
    b.user_account AS account,
    a.amount AS rechargeAmount,
    a.before_balance AS beforeBalance,
    a.recharge_time AS rechargeTime
    FROM
    `czb_offline_distributor_records` AS a
    JOIN czb_user AS b ON a.buyer_id = b.user_id
    <where>
        <if test="isSpecial != null">
            and b.is_special = #{isSpecial, jdbcType = INTEGER}
        </if>
        <if test="account != null and account != ''">
            and b.user_account LIKE concat('%',#{account,jdbcType=VARCHAR},'%')
        </if>
        <if test="startTime != null and endTime != null">
            and a.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
            and a.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
        </if>
    </where>
    ORDER BY
    rechargeTime DESC
</select>

<select id="getOfflineConsumptionList" parameterType="com.cqut.czb.bn.entity.dto.OfflineConsumptionDTO" resultType="com.cqut.czb.bn.entity.dto.OfflineConsumptionDTO">
    SELECT
    a.record_id as recordId,
    a.petrol_num AS petrolNum,
    a.turnover_amount AS amount,
    a.is_recharged AS state,
    b.user_account AS account,
    a.create_at AS rechargeTime
    FROM
    `czb_petrol_sales_records` AS a
    JOIN czb_user AS b ON a.buyer_id = b.user_id
    <where>
        a.record_type = 3
        and a.state = 1
        <if test="isSpecial != null">
            and b.is_special = #{isSpecial, jdbcType = INTEGER}
        </if>
        <if test="petrolNum != null and petrolNum != ''">
            and a.petrol_num LIKE concat('%',#{petrolNum,jdbcType=VARCHAR},'%')
        </if>
        <if test="state != null and state != ''">
            and a.is_recharged =  #{state}
        </if>
        <if test="account != null and account != ''">
            and b.user_account LIKE concat('%',#{account,jdbcType=VARCHAR},'%')
        </if>
        <if test="startTime!= null and endTime!= null">
            and a.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
            and a.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
        </if>
    </where>
    ORDER BY
    rechargeTime DESC
</select>

<select id="getOfflineClientList" parameterType="com.cqut.czb.bn.entity.dto.OfflineClientDTO" resultType="com.cqut.czb.bn.entity.dto.OfflineClientDTO">
    SELECT
    a.user_account as account,
    d.offline_recharge_balance as balance,
    totalConsumption,
    totalRecharge,
    totalTurn,
    b.create_at AS registerTime
    FROM
    czb_user AS a
    LEFT JOIN czb_user_role AS b ON a.user_id = b.user_id
    JOIN czb_role AS c ON c.role_id = b.role_id
    AND c.role_name = '线下大客户'
    LEFT JOIN czb_user_income_info AS d ON d.user_id = a.user_id
    LEFT JOIN (
    SELECT DISTINCT
    buyer_id,
    sum( turnover_amount ) totalConsumption
    FROM
    czb_petrol_sales_records
    WHERE
    czb_petrol_sales_records.record_type = 3
    AND czb_petrol_sales_records.state = 1
    <if test="startTime != null and endTime != null">
        and czb_petrol_sales_records.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
        and czb_petrol_sales_records.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
    </if>
    GROUP BY
    buyer_id
    ) AS e ON e.buyer_id = a.user_id
    LEFT JOIN (
    SELECT DISTINCT
    buyer_id,
    sum( amount ) totalRecharge
    FROM
    czb_offline_distributor_records
    WHERE
    czb_offline_distributor_records.amount &gt;0
    <if test="startTime != null and endTime != null">
        and czb_offline_distributor_records.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
        and czb_offline_distributor_records.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
    </if>
    GROUP BY buyer_id ) AS f ON f.buyer_id = a.user_id
    LEFT JOIN (
    SELECT DISTINCT
    buyer_id,
    sum( amount ) totalTurn
    FROM
    czb_offline_distributor_records
    WHERE
    czb_offline_distributor_records.amount &lt;0
    <if test="startTime != null and endTime != null">
        and czb_offline_distributor_records.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
        and czb_offline_distributor_records.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
    </if>
    GROUP BY buyer_id ) AS g ON g.buyer_id = a.user_id
    <where>
        <if test="isSpecial != null">
            and a.is_special = #{isSpecial, jdbcType = INTEGER}
        </if>
        <if test="account != null and account != ''">
            and a.user_account LIKE concat('%',#{account,jdbcType=VARCHAR},'%')
        </if>
    </where>
    ORDER BY
    b.create_at DESC
<!--    SELECT DISTINCT-->
<!--    b.user_account AS account,-->
<!--    c.offline_recharge_balance AS balance,-->
<!--    a.create_at AS registerTime,-->
<!--    IFNULL(totalConsumption,0) as totalConsumption,-->
<!--    IFNULL(totalRecharge,0) as totalRecharge,-->
<!--    IFNULL(totalTurn,0) as totalTurn-->
<!--    FROM-->
<!--    czb_user_role AS a-->
<!--    JOIN czb_user AS b ON a.user_id = b.user_id-->
<!--    JOIN czb_user_income_info AS c ON a.user_id = c.user_id-->
<!--    JOIN czb_role as f on a.role_id = f.role_id-->
<!--    LEFT JOIN (-->
<!--    SELECT-->
<!--    buyer_id,-->
<!--    sum( turnover_amount ) totalConsumption-->
<!--    FROM-->
<!--    czb_petrol_sales_records-->
<!--    WHERE-->
<!--    buyer_id in ( SELECT DISTINCT buyer_id FROM czb_petrol_sales_records-->
<!--    JOIN czb_user_role ON czb_petrol_sales_records.buyer_id = czb_user_role.user_id-->
<!--    JOIN czb_role on czb_role.role_id = czb_user_role.role_id-->
<!--    WHERE czb_role.role_name = '线下大客户' )-->
<!--    AND record_type = 3-->
<!--    and state = 1-->
<!--    <if test="startTime != null and endTime != null">-->
<!--        and czb_petrol_sales_records.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}-->
<!--        and czb_petrol_sales_records.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}-->
<!--    </if>-->
<!--    GROUP BY-->
<!--    buyer_id-->
<!--    ) AS d ON a.user_id = d.buyer_id-->
<!--    LEFT JOIN (-->
<!--    SELECT-->
<!--    buyer_id,-->
<!--    sum( amount ) totalRecharge-->
<!--    FROM-->
<!--    czb_offline_distributor_records-->
<!--    WHERE-->
<!--    buyer_id in ( SELECT DISTINCT buyer_id FROM czb_offline_distributor_records-->
<!--    JOIN czb_user_role ON czb_offline_distributor_records.buyer_id = czb_user_role.user_id-->
<!--    JOIN czb_role on czb_role.role_id = czb_user_role.role_id-->
<!--    WHERE czb_role.role_name = '线下大客户')-->
<!--    and czb_offline_distributor_records.amount&gt;0-->
<!--    <if test="startTime != null and endTime != null">-->
<!--        and czb_offline_distributor_records.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}-->
<!--        and czb_offline_distributor_records.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}-->
<!--    </if>-->
<!--    GROUP BY-->
<!--    buyer_id-->
<!--    ) AS e ON a.user_id = e.buyer_id-->
<!--    LEFT JOIN (-->
<!--    SELECT-->
<!--    buyer_id,-->
<!--    sum( amount ) totalTurn-->
<!--    FROM-->
<!--    czb_offline_distributor_records-->
<!--    WHERE-->
<!--    buyer_id in ( SELECT DISTINCT buyer_id FROM czb_offline_distributor_records-->
<!--    JOIN czb_user_role ON czb_offline_distributor_records.buyer_id = czb_user_role.user_id-->
<!--    JOIN czb_role on czb_role.role_id = czb_user_role.role_id-->
<!--    WHERE czb_role.role_name = '线下大客户')-->
<!--    and czb_offline_distributor_records.amount &lt;0-->
<!--    <if test="startTime != null and endTime != null">-->
<!--        and czb_offline_distributor_records.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}-->
<!--        and czb_offline_distributor_records.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}-->
<!--    </if>-->
<!--    GROUP BY-->
<!--    buyer_id-->
<!--    ) AS g ON a.user_id = g.buyer_id-->
<!--    <where>-->
<!--        f.role_name = '线下大客户'-->
<!--        <if test="account != null and account != ''">-->
<!--            and b.user_account LIKE concat('%',#{account,jdbcType=VARCHAR},'%')-->
<!--        </if>-->
<!--    </where>-->
<!--    ORDER BY-->
<!--    a.create_at DESC-->
</select>

<select id="getRechargeAccountList" parameterType="java.lang.Integer" resultType="java.lang.String">
    SELECT
    b.user_account
    FROM
    `czb_user_role` AS a
    JOIN czb_user AS b ON a.user_id = b.user_id
    JOIN czb_role AS c on c.role_id = a.role_id
    <where>
        c.role_name = '线下大客户'
        <if test="_parameter != null">
            and b.is_special = #{_parameter, jdbcType = INTEGER}
        </if>
    </where>
</select>

<select id="getAccountBalance" parameterType="java.lang.String" resultType="java.lang.Double">
    SELECT
    IFNULL( a.offline_recharge_balance, 0.00 )
    FROM
    `czb_user_income_info` AS a
    JOIN czb_user AS b ON a.user_id = b.user_id
    JOIN czb_user_role AS c ON a.user_id = c.user_id
    JOIN czb_role AS d on d.role_id = c.role_id
    <where>
        d.role_name = '线下大客户'
        and b.user_account = #{account,jdbcType = VARCHAR}
    </where>
    LIMIT 1
</select>

<select id="selectAccount" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT
    count( * )
    FROM
    `czb_user_role` AS a
    JOIN czb_user AS b ON a.user_id = b.user_id
    JOIN czb_role AS c on c.role_id = a.role_id
    <where>
        c.role_name = '线下大客户'
        AND b.user_account = #{account,jdbcType = VARCHAR}
    </where>
</select>

<select id="getInfo" parameterType="com.cqut.czb.bn.entity.dto.RechargeDTO" resultType="com.cqut.czb.bn.entity.dto.RechargeDTO">
    SELECT
    a.user_id AS userId,
    a.info_id AS infoId,
    a.offline_recharge_balance AS balance
    FROM
    `czb_user_income_info` AS a
    JOIN czb_user AS b ON a.user_id = b.user_id
    <where>
        b.user_account = #{account,jdbcType = VARCHAR}
    </where>
    LIMIT 1
</select>

<insert id="insertIncomeInfo" parameterType="com.cqut.czb.bn.entity.dto.RechargeDTO">
        INSERT INTO `czb_income_log` ( record_id, amount, type,
        info_id, before_change_income, remark,souse_id, create_at, update_at )
        VALUES (#{recordId,jdbcType=VARCHAR}, #{rechargeAmount,jdbcType=DOUBLE},6,
        #{infoId,jdbcType=VARCHAR},#{balance,jdbcType=DOUBLE},"线下大客户充值",#{recordId,jdbcType=VARCHAR},now(), now())
    </insert>

<insert id="insertOfflineRecords" parameterType="com.cqut.czb.bn.entity.dto.RechargeDTO">
        INSERT INTO `czb_offline_distributor_records` ( recharge_id,
        buyer_id, amount, recharge_time, before_balance, create_at, update_at )
        VALUES(#{recordId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR},
        #{rechargeAmount,jdbcType=DOUBLE},now(), #{balance,jdbcType=DOUBLE},now(), now())
    </insert>

<update id="updateBalance" parameterType="com.cqut.czb.bn.entity.dto.RechargeDTO">
    UPDATE `czb_user_income_info`
    SET offline_recharge_balance =  #{rechargeAmount}
    <where>
        user_id = #{userId,jdbcType=VARCHAR}
    </where>
</update>

<select id="getTotalRecharge" parameterType="com.cqut.czb.bn.entity.dto.AccountRechargeDTO" resultType="java.lang.Double">
    SELECT
    IFNULL( sum( amount ), 0 )
    FROM
    `czb_offline_distributor_records` AS a
    JOIN czb_user AS b ON a.buyer_id = b.user_id
    <where>
    a.amount &gt;0
        <if test="isSpecial != null">
            and b.is_special = #{isSpecial, jdbcType = INTEGER}
        </if>
        <if test="account != null and account != ''">
            and b.user_account LIKE concat('%',#{account,jdbcType=VARCHAR},'%')
        </if>
        <if test="startTime!= null">
            and a.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
        </if>
        <if test="endTime!= null">
            and a.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
        </if>
    </where>
</select>

    <select id="getTotalTurn" parameterType="com.cqut.czb.bn.entity.dto.AccountRechargeDTO" resultType="java.lang.Double">
        SELECT
        IFNULL( sum( amount ), 0 )
        FROM
        `czb_offline_distributor_records` AS a
        JOIN czb_user AS b ON a.buyer_id = b.user_id
        <where>
            a.amount &lt;0
            <if test="isSpecial != null">
                and b.is_special = #{isSpecial, jdbcType = INTEGER}
            </if>
            <if test="account != null and account != ''">
                and b.user_account LIKE concat('%',#{account,jdbcType=VARCHAR},'%')
            </if>
            <if test="startTime!= null">
                and a.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
            </if>
            <if test="endTime!= null">
                and a.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
            </if>
        </where>
    </select>

<select id="getTotalSale" parameterType="com.cqut.czb.bn.entity.dto.OfflineConsumptionDTO" resultType="java.lang.Double">
        SELECT
            IFNULL( sum( turnover_amount ), 0 )
        FROM
            `czb_petrol_sales_records` as a
        JOIN czb_user AS b ON a.buyer_id = b.user_id
        <where>
            a.record_type = 3
            and a.state = 1
            <if test="isSpecial != null">
                and b.is_special = #{isSpecial, jdbcType = INTEGER}
            </if>
            <if test="petrolNum != null and petrolNum != ''">
                and a.petrol_num LIKE concat('%',#{petrolNum,jdbcType=VARCHAR},'%')
            </if>
            <if test="state != null and state != ''">
                and a.is_recharged =  #{state}
            </if>
            <if test="account != null and account != ''">
                and b.user_account LIKE concat('%',#{account,jdbcType=VARCHAR},'%')
            </if>
            <if test="startTime!= null">
                and a.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
            </if>
            <if test="endTime!= null">
                and a.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
            </if>
        </where>
    </select>

    <select id="getTotalBalance" parameterType="com.cqut.czb.bn.entity.dto.OfflineConsumptionDTO" resultType="com.cqut.czb.bn.entity.dto.BeforeBalanceDTO">
        SELECT
        amount AS amount,
        before_change_income AS beforeBalance,
        type AS type
        FROM
        `czb_income_log`as a
        left join czb_user_income_info as b on a.info_id = b.info_id
        left join czb_user AS c ON c.user_id = b.user_id
        <where>
            (type = 6
            OR
            type = 7)
            <if test="isSpecial != null">
                and b.is_special = #{isSpecial, jdbcType = INTEGER}
            </if>
            <if test="account != null and account != ''">
                and c.user_account LIKE concat('%',#{account,jdbcType=VARCHAR},'%')
            </if>
            <if test="startTime!= null">
                and a.create_at &gt;= #{startTime,jdbcType=TIMESTAMP}
            </if>
            <if test="endTime!= null">
                and a.create_at &lt;= #{endTime,jdbcType=TIMESTAMP}
            </if>
        </where>
        ORDER BY
        a.create_at DESC
        LIMIT 1
    </select>

    <select id="getPassword" resultType="java.lang.String">
        SELECT
            content
        FROM
            `czb_dict`
        <where>
            NAME = 'finance_password'
        </where>
    </select>

    <select id="getSpecialPassword" resultType="java.lang.String">
        SELECT
        content
        FROM
        `czb_dict`
        <where>
            NAME = 'special_finance_password'
        </where>
    </select>

    <update id="changePWD" parameterType="java.lang.String">
        UPDATE `czb_dict`
        SET content =  #{newPWD,jdbcType=VARCHAR}
        <where>
            NAME = 'finance_password'
        </where>
    </update>

    <update id="changeSpecialPWD" parameterType="java.lang.String">
        UPDATE `czb_dict`
        SET content =  #{newPWD,jdbcType=VARCHAR}
        <where>
            NAME = 'special_finance_password'
        </where>
    </update>

    <insert id="insertPassword" parameterType="java.lang.String">
        INSERT INTO `czb_dict` ( dict_id,name, content,create_at, update_at )
        VALUES("24687922335559", "finance_password",#{newPWD,jdbcType=VARCHAR},now(), now())
    </insert>

    <insert id="insertSpecialPassword" parameterType="java.lang.String">
        INSERT INTO `czb_dict` ( dict_id,name, content,create_at, update_at )
        VALUES("4475471578790034", "special_finance_password",#{newPWD,jdbcType=VARCHAR},now(), now())
    </insert>
</mapper>
