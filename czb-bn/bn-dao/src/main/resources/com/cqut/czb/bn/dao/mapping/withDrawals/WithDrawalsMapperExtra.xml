<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cqut.czb.bn.dao.mapper.withDrawals.WithDrawalsMapperExtra">
    <select id="getRecode" resultType="com.cqut.czb.bn.entity.dto.withdrawals.WithdrawalsSelectDTO">
        SELECT
        user.user_account userAccount,
        info.info_id infoId,
        user.user_name userName,
        recode.amount,
        recode.remark,
        recode.create_at createAt,
        recode.before_change_income - recode.amount rest,
        IFNULL(info.fanyong_income + info.share_income + info.other_income - info.withdrawed, 0) currentRest
        FROM
        czb_income_log AS recode
        LEFT JOIN czb_user_income_info AS info ON recode.info_id = info.info_id
        LEFT JOIN czb_user AS user ON info.user_id = user.user_id
        <where>
            recode.type = 1
            <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
                and recode.create_at between #{startTime} and #{endTime}
            </if>
            <if test="infoId !=null and infoId != '' ">
                and recode.info_id = #{infoId,jdbcType=VARCHAR}
            </if>
            <if test="userAccount !=null and userAccount != '' ">
                and user.user_account like concat(#{userAccount},'%')
            </if>
        </where>
        ORDER BY recode.create_at DESC
    </select>

    <select id="getTotalAmount" resultType="String">
        SELECT
        IFNULL(SUM(amount),0) totalAmount
        FROM
        czb_income_log AS recode
        LEFT JOIN czb_user_income_info AS info ON recode.info_id = info.info_id
        LEFT JOIN czb_user AS user ON info.user_id = user.user_id
        <where>
            type = 1
            <if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
                and recode.create_at between #{startTime} and #{endTime}
            </if>
            <if test="infoId !=null and infoId != '' ">
                and recode.info_id = #{infoId,jdbcType=VARCHAR}
            </if>
            <if test="userAccount !=null and userAccount != '' ">
                and user.user_account like concat(#{userAccount},'%')
            </if>
        </where>
    </select>

    <select id="getTodayTotalAmount" resultType="String">
        SELECT
        IFNULL(SUM(recode.amount), 0) todayTotalAmount
        FROM
        czb_income_log AS recode
        LEFT JOIN czb_user_income_info AS info ON recode.info_id = info.info_id
        LEFT JOIN czb_user AS user ON info.user_id = user.user_id
        <where>
            type = 1
            and to_days(recode.create_at) = to_days(now())
            <if test="infoId !=null and infoId != '' ">
                and recode.info_id = #{infoId,jdbcType=VARCHAR}
            </if>
            <if test="userAccount !=null and userAccount != '' ">
                and user.user_account like concat(#{userAccount},'%')
            </if>
        </where>
    </select>

    <select id="getMonthTotalAmount" resultType="String">
        SELECT
        IFNULL(SUM(recode.amount), 0) monthTotalAmount
        FROM
        czb_income_log AS recode
        LEFT JOIN czb_user_income_info AS info ON recode.info_id = info.info_id
        LEFT JOIN czb_user AS user ON info.user_id = user.user_id
        <where>
            type = 1
            and DATE_FORMAT(recode.create_at, '%Y%m') = DATE_FORMAT(CURDATE( ) , '%Y%m')
            <if test="infoId !=null and infoId != '' ">
                and recode.info_id = #{infoId,jdbcType=VARCHAR}
            </if>
            <if test="userAccount !=null and userAccount != '' ">
                and user.user_account like concat(#{userAccount},'%')
            </if>
        </where>
    </select>

    <update id="addMoney">
        UPDATE czb_user_income_info
        SET other_income = other_income + #{amount}
        WHERE info_id = #{infoId};
    </update>

    <insert id="insertRecode">
        INSERT INTO czb_income_log(record_id,
                                   amount,
                                   type,
                                   info_id,
                                   before_change_income,
                                   remark,
                                   souse_id,
                                   withdraw_to,
                                   withdraw_name,
                                   create_at,
                                   update_at)
        VALUES (#{recodeId},
                #{amount},
                #{type},
                #{infoId},
                #{beforeChangeIncome},
                #{remark},
                #{souseId},
                (SELECT user_id FROM czb_user_income_info WHERE info_id = #{infoId}),
                (SELECT user.user_name
                 FROM czb_user_income_info AS info
                          LEFT JOIN czb_user AS user ON user.user_id = info.user_id WHERE info.info_id = #{infoId}),
            CURRENT_TIMESTAMP,
            CURRENT_TIMESTAMP )
    </insert>
</mapper>
