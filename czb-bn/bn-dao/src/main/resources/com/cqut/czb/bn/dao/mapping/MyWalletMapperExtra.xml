<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cqut.czb.bn.dao.mapper.MyWalletMapperExtra">
    <select id="getUserAllIncome" resultType="com.cqut.czb.bn.entity.dto.personCenter.myWallet.BalanceAndInfoIdDTO">
        select info_id as infoId, (fanyong_income + share_income + other_income - withdrawed) AS balance
        from czb_user_income_info
        where user_id = #{userId}
        limit 1
    </select>

    <update id="increaseWithdrawed" parameterType="java.lang.String">
        UPDATE czb_user_income_info
        SET withdrawed = withdrawed + #{paymentAmount}
        WHERE info_id = #{infoId}
    </update>

    <update id="increaseOtherMoney" parameterType="java.lang.String">
        UPDATE czb_user_income_info
        SET other_income = other_income + #{money}
        WHERE info_id = #{infoId}
    </update>

    <select id="getPsw" parameterType="java.lang.String" resultType="java.lang.String">
        select user_psw
        FROM czb_user
        WHERE user_id = #{userId}
    </select>

    <insert id="insertIncomeLog" parameterType="com.cqut.czb.bn.entity.dto.personCenter.myWallet.IncomeLogDTO">
        INSERT INTO czb.czb_income_log (
            record_id,
            amount,
            type,
            info_id,
            before_change_income,
            remark,
            souse_id,
            withdraw_to,
            withdraw_name,
            withdraw_account,
            create_at,
            update_at
        )
        VALUES
            (
                #{recordId},
                #{amount},
                #{type},
                #{infoId},
                #{beforeChangeIncome},
                #{remark},
                #{sourceId},
                #{withdrawTo},
                #{withdrawName},
                #{withdrawAmount},
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            );
    </insert>

    <!--获得提现记录-->
    <select id="getWithdrawLog" resultType="com.cqut.czb.bn.entity.dto.personCenter.myWallet.WithDrawLogDTO">
        SELECT
            date_format(l.create_at, '%Y-%m') AS yearMonth,
            l.create_at createTime,
            l.withdraw_account money
        FROM
            czb_income_log l,
            czb_user_income_info i
        WHERE
            l.info_id = i.info_id
        AND l.type = 1
        AND i.user_id = #{userId}
    </select>

    <insert id="insertIncomeInfo" parameterType="com.cqut.czb.bn.entity.dto.personCenter.myWallet.InsertIncomeInfo">
        INSERT INTO czb_user_income_info (
            info_id,
            user_id,
            fanyong_income,
            share_income,
            pay_total_rent,
            got_total_rent,
            other_income,
            withdrawed,
            create_at,
            update_at
        )
        VALUES
            (
                #{infoId},
                #{userId},
                '0',
                '0',
                '0',
                '0',
                '0',
                '0',
                CURRENT_TIMESTAMP ,
                CURRENT_TIMESTAMP
            )
    </insert>

    <select id="getUserIncomeInfo" parameterType="com.cqut.czb.bn.entity.entity.withDrawed.IncomeInputDTO" resultType="com.cqut.czb.bn.entity.entity.withDrawed.Income">
        SELECT
            info.info_id,
            (
                info.fanyong_income + share_income + got_total_rent + other_income
            ) AS balance,
            withdrawed,
            (
                info.fanyong_income + share_income + got_total_rent + other_income + withdrawed
            ) AS allAmount,
            users.user_account account,
            count(log.info_id) withdrawedAmount
        FROM
            czb_user_income_info info
        LEFT JOIN czb_user users ON users.user_id = info.user_id
        LEFT JOIN czb_income_log log ON log.info_id = info.info_id
        AND log.type = 1
        <where>
            <if test="account != null and account != ''">
                AND
                users.user_account like concat('%', #{account},'%')
            </if>
        </where>
        GROUP BY
            info.info_id
        ORDER BY
            allAmount DESC
    </select>

    <select id="getAllInfo" resultType="com.cqut.czb.bn.entity.entity.withDrawed.IncomeOutputDTO">
        SELECT
            sum(
                (
                    fanyong_income + share_income + got_total_rent + other_income
                ) - withdrawed
            ) allAbleWithdrawed,
            sum(withdrawed) allWithdrawed
        FROM
            czb_user_income_info info
    </select>

    <select id="todayAllInfo" parameterType="com.cqut.czb.bn.entity.entity.withDrawed.IncomeInputDTO" resultType="com.cqut.czb.bn.entity.entity.withDrawed.IncomeOutputDTO">
        SELECT
            COALESCE(sum(amount),0.0) todayWithdrawed,
            count(info_id) todayWithdrawedTimes
        FROM
            czb_income_log log
        WHERE
            type = 1
        AND create_at BETWEEN #{startTime}
        AND #{endTime}
    </select>

    <select id="getUserInfo" parameterType="java.lang.String" resultType="java.lang.String">
        select info_id from czb_user_income_info
        where user_id = #{userId}
    </select>
</mapper>
